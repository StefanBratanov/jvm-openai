plugins {
    id "java-library"
    id "jacoco"
    id "org.sonarqube" version "4.4.1.3373"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "com.diffplug.spotless" version "6.24.0"
    id "me.qoomon.git-versioning" version "6.4.3"
    id "com.github.ben-manes.versions" version "0.50.0"
}

group = "io.github.stefanbratanov"

version = "develop"

gitVersioning.apply {
    refs {
        tag("v(?<version>.*)") {
            version = '${ref.version}'
        }
    }
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

def jacksonVersion = "2.16.1"
def junitVersion = "5.10.1"

dependencies {
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
    api("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation("org.assertj:assertj-core:3.25.1")
    testImplementation("com.atlassian.oai:swagger-request-validator-core:2.39.0")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "jvm-openai"
                description = "A minimalistic OpenAI API client for the JVM, written in Java"
                url = "https://github.com/StefanBratanov/jvm-openai"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "StefanBratanov"
                        name = "Stefan Bratanov"
                        email = "stefan.bratanov93@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/StefanBratanov/jvm-openai.git"
                    developerConnection = "scm:git:ssh://github.com/StefanBratanov/jvm-openai.git"
                    url = "https://github.com/StefanBratanov/jvm-openai"
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    sign publishing.publications
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}